I".r<h1 id="匿名函数lambda用法总结">匿名函数lambda用法总结</h1>

<p>既然lambda被称为匿名函数，那么我们只需要把握一点，即我们可以用
函数的观点来理解lambda的书写和调用方式,它返回的是一个函数对象。</p>
<h3 id="lambda的一般使用方法">lambda的一般使用方法</h3>
<p>本小节内容转载自<a href="https://juejin.im/post/5d00b7efe51d4555fd20a31c">https://juejin.im/post/5d00b7efe51d4555fd20a31c</a></p>
<h4 id="无参匿名函数">无参匿名函数</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 可以将lambda直接传递给一个变量，像调用一般函数一样使用
</span>
<span class="n">B</span> <span class="o">=</span> <span class="k">lambda</span> <span class="p">:</span><span class="bp">True</span>
<span class="k">print</span><span class="p">(</span><span class="n">B</span><span class="p">())</span>
<span class="c1"># 等价于
</span>
<span class="k">def</span> <span class="nf">BF</span><span class="p">():</span>
 <span class="k">return</span> <span class="bp">True</span>
<span class="k">print</span><span class="p">(</span><span class="n">BF</span><span class="p">())</span>
<span class="c1"># 示例结果
</span>
<span class="bp">True</span>
<span class="bp">True</span>
</code></pre></div></div>
<h4 id="有参匿名函数">有参匿名函数</h4>
<p>支持单参数多参数，同时也可以带默认值，
这里举一个多参数的例子：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">two_sum</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="c1"># 等同于：
</span>
<span class="k">def</span> <span class="nf">two_sum</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="k">print</span><span class="p">(</span><span class="n">two_sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="c1"># 示例结果
</span>
<span class="mi">3</span>
</code></pre></div></div>
<p>我们也可以直接从后边传参：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">two_sum</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">two_sum</span><span class="p">)</span>
<span class="c1"># 示例结果
</span>
<span class="mi">7</span>
</code></pre></div></div>

<h3 id="lambda的高阶应用方法">lambda的高阶应用方法</h3>

<h4 id="与list的结合字典同理">与list的结合（字典同理）</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_a</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">a</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="n">b</span><span class="o">**</span><span class="mi">3</span><span class="p">]</span>
<span class="c1"># 是一个函数对象
</span>
<span class="k">print</span><span class="p">(</span><span class="n">list_a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="o">&lt;</span><span class="n">function</span> <span class="o">&lt;</span><span class="k">lambda</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x0259B8B0</span><span class="o">&gt;</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">list_a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="c1"># 把其中的值拿出来
</span>
<span class="k">print</span><span class="p">(</span><span class="n">g</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="mi">8</span>
</code></pre></div></div>
<h4 id="三元表达式结合求最小值">三元表达式结合求最小值</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lower</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">y</span> <span class="k">else</span> <span class="n">y</span>
<span class="k">print</span><span class="p">(</span><span class="n">lower</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>
<h4 id="与mapreducefiltersorted函数的结合">与map/reduce/filter/sorted函数的结合</h4>
<p>之所以把这几个函数拿出来，是因为lambda的使用在调用这几个函数时格外常见，
因为可以大大缩减代码量</p>

<p>本小节内容参考CSDN用户-浅浅爱默默</p>

<h5 id="filter">filter()</h5>
<p>filter函数的作用是过滤序列，把满足条件的元素留下来，返回一个迭代器对象（意味着如果想要列表需要手动转换），</p>

<p>语法：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">filter</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span><span class="o">=</span><span class="p">[(</span><span class="s">'G1'</span><span class="p">,</span><span class="s">'2'</span><span class="p">,</span><span class="s">'song'</span><span class="p">),(</span><span class="s">'D2'</span><span class="p">,</span><span class="s">'2'</span><span class="p">,</span><span class="s">''</span><span class="p">),(</span><span class="s">'T3'</span><span class="p">,</span><span class="s">''</span><span class="p">,</span><span class="s">'shaopu'</span><span class="p">),(</span><span class="s">'K4'</span><span class="p">,</span><span class="s">''</span><span class="p">,</span><span class="s">'3'</span><span class="p">)]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="s">"GD"</span><span class="p">,</span><span class="n">result</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"GD"</span><span class="p">,</span><span class="n">result</span><span class="p">)))</span>

<span class="p">[(</span><span class="s">'G1'</span><span class="p">,</span> <span class="s">'2'</span><span class="p">,</span> <span class="s">'song'</span><span class="p">),</span> <span class="p">(</span><span class="s">'D2'</span><span class="p">,</span> <span class="s">'2'</span><span class="p">,</span> <span class="s">''</span><span class="p">)]</span>
<span class="p">[(</span><span class="s">'T3'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="s">'shaopu'</span><span class="p">),</span> <span class="p">(</span><span class="s">'K4'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="s">'3'</span><span class="p">)]</span>
</code></pre></div></div>
<h5 id="map">map()</h5>
<p>map函数的作用是根据提供的函数对指定序列做映射,</p>

<p>语法：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">map</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#遍历map，根据不同的对象输出不同的结果，map(操作，操作对象)
</span>
<span class="n">a</span><span class="o">=</span><span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">plus</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>             
    <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">10</span>

<span class="k">print</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">plus</span><span class="p">,</span><span class="n">a</span><span class="p">))</span>        
<span class="c1">#计算列表a中各个元素，返回一个迭代器
</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">plus</span><span class="p">,</span><span class="n">a</span><span class="p">)))</span>  
<span class="c1">#以列表形式返回映射后的结果
</span>
<span class="k">print</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span><span class="n">a</span><span class="p">))</span>      
<span class="c1">#使用lambda匿名函数，返回一个迭代器
</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span><span class="n">a</span><span class="p">)))</span> 
<span class="c1">#以列表形式返回映射后的结果
</span> 
<span class="c1"># 运行结果：
</span>
<span class="o">&lt;</span><span class="nb">map</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x000001D694A89550</span><span class="o">&gt;</span>
<span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">]</span>
<span class="o">&lt;</span><span class="nb">map</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x000001D694A89128</span><span class="o">&gt;</span>
<span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">]</span>
<span class="c1"># 提供了两个列表，对相同位置的列表数据进行相加
</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">])))</span>
<span class="c1"># 运行结果：
</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">19</span><span class="p">]</span>
</code></pre></div></div>
<h5 id="reduce">reduce()</h5>
<p>reduce函数的作用是对序列中的元素进行递归操作。reduce() 函数会对参数序列中元素进行累积。
函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，
得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p>

<blockquote>
  <p>在py3中需要从functools导入</p>
</blockquote>

<p>语法：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">reduce</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">[,</span> <span class="n">initializer</span><span class="p">])</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#reduce()递归，两个参数
</span>
<span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
<span class="k">print</span><span class="p">(</span><span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)))</span>  <span class="c1">#1*2*3*4*5*6*7*8*9(含左不含右）
</span>
<span class="k">print</span><span class="p">(</span><span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)))</span>  <span class="c1">#1+2+3+4+5+6+7+8+9
</span></code></pre></div></div>

<h5 id="sorted">sorted()</h5>

<p>语法：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sorted</span><span class="p">(</span><span class="n">iterable</span><span class="p">[,</span> <span class="n">key</span><span class="p">[,</span> <span class="n">reverse</span><span class="p">]])</span>
</code></pre></div></div>
<p>这个例子看下图像处理部分的调用就可以了:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">cnts</span><span class="p">,</span> <span class="n">boundingBoxes</span><span class="p">)</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">cnts</span><span class="p">,</span> <span class="n">boundingBoxes</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="n">reverse</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="for循环与lambda">for循环与lambda</h4>

<p>本小节内容参考<a href="https://www.cnblogs.com/liuq/p/6073855.html">https://www.cnblogs.com/liuq/p/6073855.html</a></p>

<ul>
  <li><strong>f = [lambda x: x*i for i in range(4)]</strong></li>
</ul>

<p>这种表达形式等价于：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="n">fs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">lam</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">x</span><span class="o">*</span><span class="n">i</span>
        <span class="n">fs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">lam</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fs</span>
</code></pre></div></div>
<p>当调用func()时，每循环一次，将lam函数的地址存到fs中。
因为在每次循环中lam函数都未绑定i的值，所以直到循环结束，
i的值为3，并将lam中所用到的i值定为3 ，因此真正调用（例如f<a href="3">0</a>）的时候i值保持不变（为3）</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">3</span>    <span class="c1"># 1*3
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">](</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">3</span>    <span class="c1"># 1*3
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">2</span><span class="p">](</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">3</span>    <span class="c1"># 1*3
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">3</span><span class="p">](</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">3</span>    <span class="c1"># 1*3
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="mi">3</span><span class="p">)</span>
<span class="mi">9</span>    <span class="c1"># 3*3
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">](</span><span class="mi">3</span><span class="p">)</span>
<span class="mi">9</span>    <span class="c1"># 3*3
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">2</span><span class="p">](</span><span class="mi">3</span><span class="p">)</span>
<span class="mi">9</span>    <span class="c1"># 3*3
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">3</span><span class="p">](</span><span class="mi">3</span><span class="p">)</span>
<span class="mi">9</span>    <span class="c1"># 3*3
</span></code></pre></div></div>
<blockquote>
  <p>如果把x换成i，那就与传入的值无关了，始终是3*3</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)]</span>
<span class="c1"># f = [lambda i:i*i for i in range(4)]
</span></code></pre></div>  </div>
</blockquote>

<ul>
  <li><strong>f1 = [lambda i=i: i*i for i in range(4)]</strong></li>
</ul>

<p>这种表达形式等价于：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="n">fs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">lam</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">i</span><span class="p">):</span>   <span class="c1"># 即 i=i
</span>            
            <span class="k">return</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span>    <span class="c1"># 即 i*i
</span>        
        <span class="n">fs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">lam</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fs</span>
</code></pre></div></div>
<p>当调用 func() 时，每循环一次，将lam函数的地址存到
fs中。但是在每次循环中lam函数都将i值绑定到了x上，<strong>函数在定义时因为默认参数的存在，就给形参赋上了初值，</strong>
所以直到循环结束，不同地址的lam函数的x值为都不一样,
因此真正调用（例如 f[0]）的时候x值都为当时被绑定的值。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">f1</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">:</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f1</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f1</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f1</span><span class="p">[</span><span class="mi">2</span><span class="p">]()</span>
<span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f1</span><span class="p">[</span><span class="mi">3</span><span class="p">]()</span>
<span class="mi">9</span>
</code></pre></div></div>
<p>这也意味着如果我们给x赋了新值，那么结果也会随之改变。</p>

<ul>
  <li><strong>f2 = [lambda x=i: i*i for i in range(4)]</strong></li>
</ul>

<p>这种表达形式等价于：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="n">fs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">lam</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">i</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span>
        <span class="n">fs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">lam</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fs</span>
</code></pre></div></div>
<p>虽然lam函数将i的值绑定到了x上，但函数体中并未使用x，所以直到循环结束，i的值变为3，才会在调用时使用。其实同第一种情况是一样的。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">x</span><span class="o">=</span><span class="n">i</span><span class="p">:</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span>
<span class="mi">9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span>
<span class="mi">9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span><span class="p">[</span><span class="mi">2</span><span class="p">]()</span>
<span class="mi">9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span><span class="p">[</span><span class="mi">3</span><span class="p">]()</span>
<span class="mi">9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="mi">7</span><span class="p">)</span>
<span class="mi">9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span><span class="p">[</span><span class="mi">1</span><span class="p">](</span><span class="mi">7</span><span class="p">)</span>
<span class="mi">9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f2</span><span class="p">[</span><span class="mi">2</span><span class="p">](</span><span class="mi">7</span><span class="p">)</span>
<span class="mi">9</span>
</code></pre></div></div>

<p>在之后的讨论中，我们会再看几个稍微复杂的lambda嵌套的例子，并由此引出一个深坑–闭包。</p>
:ET