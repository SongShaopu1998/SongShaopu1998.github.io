I"B=<h1 id="由lambda引发的自由变量与闭包讨论">由lambda引发的自由变量与闭包讨论</h1>

<p>在上次学完lambda之后，我偶然在<a href="https://www.cnblogs.com/xiangnan/p/3900285.html">一篇博客</a>中看到了如下的示例：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#---CASE 1
</span>
<span class="n">fs</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:(</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span> <span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="p">),</span><span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
<span class="k">print</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">fs</span><span class="p">])</span>

<span class="c1">#---CASE 2
</span>
<span class="n">fs</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">)]</span>
<span class="k">print</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">fs</span><span class="p">])</span>

<span class="c1">#---CASE 3
</span>
<span class="n">fs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
    <span class="n">fs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">3</span><span class="p">:</span>
        <span class="k">break</span>
<span class="k">print</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">fs</span><span class="p">])</span>

<span class="c1">#---CASE 4
</span>
<span class="n">fs</span> <span class="o">=</span> <span class="p">[(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="p">)(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">)]</span>
<span class="k">print</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">fs</span><span class="p">])</span>

<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</code></pre></div></div>

<p>这个例子还是蛮有意思的，在上边的四种情况中，只有CASE1和CASE4能够得到我们想要的结果。这是为什么呢？</p>

<p>其实如果从上次对于lambda的讨论直接入手来看，我们大概能发现一些规律，CASE1和CASE4有一个共同的特点，就是最外层函数中定义的变量作为了第二层（第三层）的<strong>参数</strong>，但是CASE2与CASE3并不具备这个特征，我们来看下深层的原因是什么。</p>

<p>Python是一种解释型语言，在Python解释器开始执行后，在内存中开辟了一个空间，如果遇到变量，那就把变量名和值的对应关系记录下来；但是在遇到函数时，解释器把函数读入内存之后，函数的内部逻辑，解释器此时并不知情，我们拿CASE2举例：</p>

<p>变量<strong>i</strong>对于匿名函数lambda来说，就是我们所说的自由变量（先不给准确定义，自由变量在这里提到只是为了方便理解和简化书写），我们把这个lambda匿名函数定义为f​. <a href="https://www.cnblogs.com/xiangnan/p/3900285.html">原博客</a>的分析十分到位，这里我们直接拿来用：</p>

<blockquote>
  <p><strong>函数f​</strong>在定义时，解释器并没有把变量i和我们看到的对应的for循环中的值捆绑在一起，而只是明确了：在f​中，存在一个名为i的自由变量；</p>

  <p>在函数f​被调用时，解释器会明确：</p>

  <ol>
    <li>空间上：f​要到<strong>被定义时</strong>的外层作用域查找自由变量i对应的对象，假设这个namespace为X.</li>
    <li>时间上: 是在你<strong>当前运行时</strong>, X 里面的 i 对应的对象</li>
  </ol>
</blockquote>

<p>那么很显然，CASE2中的i所用的值都是5，因为调用的时候i值已经更新到了for循环中的最后一个。</p>

<p>但是对于CASE1和CASE4来讲，自由变量i不再是循环变量i，而是循环变量i所指对象在栈上的拷贝，由于每一次i所指对象都不相同，所以函数f​的自由变量自然而然地指向了不同对象；那么为什么会发生这种情况呢？在讲匿名函数lambda的那一篇中我们已经提到，这其实相当于在函数参数中给了一个默认参数(x=i)，由于默认参数的作用机制，<strong>必须马上初始化默认参数</strong>，自由变量被指向了不同的值。</p>

<p>形象化的定义这个过程，就出现了Python的<strong>延迟绑定（迟绑定）</strong>机制。啥叫迟绑定呢？那就是你以为他该绑定了，结果没绑定，绑定的晚了呗，这个论述的对象就是我们前边一直在说的<strong>自由变量(free variable)</strong>。</p>

<h2 id="自由变量">自由变量</h2>

<p>定义：</p>

<blockquote>
  <p>If a name is bound in a block, it is a <strong>local variable</strong> of that block, unless declared as nonlocal. If a name is bound at the module level, it is a <strong>global variable</strong>. (The variables of the module code block are local and global.) If a variable is used in a code block but not defined there, it is a <strong>free variable</strong>.</p>

  <p>–Python doc.</p>
</blockquote>

<p>用不太标准的语言去解释，就是在一个代码块内部被调用，然而却在不在本代码块内定义，在外部代码块里定义的变量，就叫自由变量。</p>

<p>有了自由变量的概念，下边我们该看闭包了。</p>

<h2 id="闭包">闭包</h2>

<p>闭包定义：(来自Wikipedia)</p>

<blockquote>
  <p><strong>闭包</strong>:英语Closure，又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使离开了创造它的环境也不例外。所以有另一种说法认为闭包 <strong>是由函数和与其相关的引用环境组合而成的实体</strong>。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p>
</blockquote>

<p>从知乎上copy个小例子：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f1</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">88</span>
    <span class="k">def</span> <span class="nf">f2</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">f2</span>

<span class="n">action</span> <span class="o">=</span> <span class="n">f1</span><span class="p">()</span>
<span class="n">action</span><span class="p">()</span>

<span class="mi">88</span>
</code></pre></div></div>

<p>f1是外部函数，f2引用了f1中定义的自由变量x，我们通过变量action获取了返回的f2，这个时候，f1已经退出了，但是！f2还是记住了f1嵌套作用域当中的变量名x。这种现象就是<strong>闭包</strong>，在闭包现象中，我们可以发现在外部函数运行结束后，<strong>自由变量并没有被垃圾回收机制回收</strong>。</p>

<p>如果我们总结一下上边的例子，那就是：</p>

<p><strong>闭包中有一个能记住嵌套作用域变量的值的函数，即使作用域已经不再存在。换而言之，闭包的特性允许定义域非全局作用域的内部函数在定义时记得他们的外层作用域的样子。</strong></p>

<h3 id="闭包特点">闭包特点</h3>

<ol>
  <li>避免使用全局变量，从而提供对某些数据的隐藏</li>
  <li>相当于对代码进行了封装，提高了可复用性和面向对象编程的优雅程度</li>
  <li>有利于并行计算</li>
</ol>

<h3 id="关于闭包的深层次研讨">关于闭包的深层次研讨</h3>

<p>在对于闭包有了初步的认识后，我们来更加深入的看下闭包的特性。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">out_f</span><span class="p">():</span>
    <span class="n">free_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">def</span> <span class="nf">in_f</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">free_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">free_list</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'%s free_list = %s'</span> <span class="o">%</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">free_list</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">in_f</span>

<span class="n">test_0</span> <span class="o">=</span> <span class="n">out_f</span><span class="p">()</span>
<span class="n">test_0</span><span class="p">(</span><span class="s">'test_0'</span><span class="p">)</span>
<span class="n">test_0</span><span class="p">(</span><span class="s">'test_0'</span><span class="p">)</span>
<span class="n">test_0</span><span class="p">(</span><span class="s">'test_0'</span><span class="p">)</span>
<span class="n">test_1</span> <span class="o">=</span> <span class="n">out_f</span><span class="p">()</span>
<span class="n">test_1</span><span class="p">(</span><span class="s">'test_1'</span><span class="p">)</span>
<span class="n">test_0</span><span class="p">(</span><span class="s">'test_0'</span><span class="p">)</span>
<span class="n">test_1</span><span class="p">(</span><span class="s">'test_1'</span><span class="p">)</span>
<span class="c1"># 运行结果
</span>
<span class="n">test_0</span> <span class="n">free_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">test_0</span> <span class="n">free_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">test_0</span> <span class="n">free_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">test_1</span> <span class="n">free_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">test_0</span> <span class="n">free_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">test_1</span> <span class="n">free_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>仔细观察上边的例子，我们可以得到如下结论：</p>

<ol>
  <li>一个闭包中引用的嵌套作用域中的自由变量仅与此闭包有关联，与其他闭包无关，换言之，闭包的每个实例互不干扰。</li>
  <li>对于当前的闭包实例，对其中蕴含的自由变量的修改会被传递到下一次对当前闭包实例的调用。</li>
</ol>

<blockquote>
  <p>对于闭包实例的调用，我们可以理解成让闭包执行一下，记一下嵌套作用域的环境，把该做的准备做好，就好比是在背文章之前总得先看一遍，之后就用就可以了</p>
</blockquote>

<p>这两条性质其实不难理解，虽然函数作用域消失，但是根据之前提到的闭包特性我们知道，通过返回值，函数保留了嵌套作用域中的变量，所以自然而然的，对自由变量的修改会一直传递下去，除非我们设定了一个新的变量，那调用的函数其实就指向了另一片内存空间，如果我们第二次调用函数时返回的仍然是test_0,那么就相当于清零，传递从头开始。</p>

<p>而之前我们提到的CASE2与CASE3，则是典型的<strong>闭包陷阱</strong>。</p>

<p>看完了闭包的分析，我们就拿应用练练手，正好自己要学习Python的装饰器，那我们就开始装饰器的研讨。</p>
:ET